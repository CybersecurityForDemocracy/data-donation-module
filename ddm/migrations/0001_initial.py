# Generated by Django 3.2.9 on 2021-12-09 12:15

import ckeditor.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExternalVariable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variable_name', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_-]*$', 'Only alphanumeric characters, underscores and hyphens are allowed.')])),
                ('source', models.CharField(choices=[('token', 'token'), ('url', 'url parameter')], max_length=30)),
                ('related_parameter', models.CharField(max_length=200)),
                ('required', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='FileUploadItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variable_name', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_-]*$', 'Only alphanumeric characters, underscores and hyphens are allowed.')])),
                ('expected_filename', models.CharField(blank=True, help_text='Optional: Specify the name of the uploaded file. Leave empty if the file contents should be matched without checking the file name. If multiple filenames should be accepted, separate the filenemas with a semicolon (;). Currently only applicable to zip uploads.', max_length=250, null=True)),
                ('valid_file_types', models.CharField(help_text='Indicate all valid file types, separated by semicolons (e.g. .json; .xlsx). Currently, only .json files are supported.', max_length=100, validators=[django.core.validators.RegexValidator('^(\\s*\\.[0-9a-zA-Z]*;*)*$', 'File types must be separated by a semicolon (;) and must be of the form".filename", where the filename can only contain letters and numbers.')])),
                ('max_filesize', models.IntegerField(default=100000, verbose_name='filesize in kb')),
                ('validation_fields', models.TextField(help_text='List all fields that must be included in the uploaded file, separated by semicolons (e.g. name; date; ...). This serves as a file validation, and the upload will be aborted if the file does not include at least the listed fields.')),
                ('extraction_fields', models.TextField(help_text='List all fields that shall be extracted from the uploaded file, separated by semicolons (e.g. name; date; ...). Only the fields listed here will be stored in the database.')),
            ],
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('index', models.PositiveIntegerField(default=1)),
                ('page_type', models.CharField(choices=[('questionpage', 'Question Page'), ('endpage', 'End Page')], default='questionpage', max_length=50)),
                ('show_back_button', models.BooleanField(default=False)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_ddm.page_set+', to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('question_text', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('question_instruction', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('required', models.BooleanField(default=False)),
                ('question_type', models.CharField(choices=[('genericquestion', 'Generic'), ('singlechoicequestion', 'Single Choice'), ('multichoicequestion', 'Multi Choice'), ('matrixquestion', 'Matrix'), ('differentialquestion', 'Differential'), ('listquestion', 'List'), ('transitionquestion', 'Transition'), ('openquestion', 'Open'), ('fileuploadquestion', 'File Upload'), ('filefeedback', 'File Feedback')], default='genericquestion', max_length=44)),
                ('index', models.PositiveIntegerField(default=1)),
                ('page', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='ddm.page')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_ddm.question_set+', to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['page__index', 'index'],
            },
        ),
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('slug', models.SlugField(verbose_name='Questionnaire Slug')),
                ('active', models.BooleanField(default=False)),
                ('accessibility', models.CharField(choices=[('public', 'Public'), ('token', 'Token')], default='Public', max_length=20)),
                ('enable_continuation', models.BooleanField(default=False)),
                ('missing_not_answered', models.IntegerField(default=-77, help_text='Default value if the participant does not answer the question.')),
                ('missing_not_seen', models.IntegerField(default=-66, help_text='Default value if the question is not shown to the participant (e.g. because it is filtered out).')),
                ('missing_invalid', models.IntegerField(default=-88, help_text='Default value if the submitted answer to a question is invalid (e.g. if the server receives a string for a question that only allows integers).')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionScale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField()),
                ('label', models.CharField(blank=True, max_length=100, null=True)),
                ('value', models.IntegerField()),
                ('add_border', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='Trigger',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('execution_point', models.CharField(choices=[('before', 'before'), ('after', 'after')], max_length=20)),
                ('trigger_type', models.CharField(choices=[('tokengenerator', 'Token Generator'), ('variablesfromdata', 'Variables from Data'), ('emailtrigger', 'E-Mail Trigger'), ('cleanuploaddata', 'Clean Upload Data')], max_length=44)),
                ('execution_page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ddm.page')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_ddm.trigger_set+', to='contenttypes.contenttype')),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ddm.questionnaire')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='TriggerTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('execution_time', models.DateTimeField()),
                ('execution_type', models.CharField(max_length=50)),
                ('execution_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CleanUploadDataTrigger',
            fields=[
                ('trigger_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.trigger')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.trigger',),
        ),
        migrations.CreateModel(
            name='DifferentialQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.question')),
                ('scale_points', models.PositiveIntegerField(default=5, help_text='The maximum number of scale points is 9.', validators=[django.core.validators.MaxValueValidator(9)])),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.question',),
        ),
        migrations.CreateModel(
            name='EmailTrigger',
            fields=[
                ('trigger_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.trigger')),
                ('from_email', models.CharField(default='contact@digital-meal.ch', max_length=254, verbose_name='Sender')),
                ('to_email', models.CharField(blank=True, max_length=254, null=True, verbose_name='Receiver')),
                ('subject', models.CharField(max_length=150)),
                ('message', models.TextField()),
                ('execution_time', models.CharField(choices=[('immediately', 'immediately'), ('delayed', 'delayed')], default='immediately', max_length=20)),
                ('execution_delay', models.IntegerField(default=0, help_text='Execution delay time in minutes.')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.trigger',),
        ),
        migrations.CreateModel(
            name='EndPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.page')),
                ('redirect', models.BooleanField(default=False)),
                ('redirect_url', models.URLField(blank=True, help_text='Only required if "redirect" is selected.', null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.page',),
        ),
        migrations.CreateModel(
            name='FileFeedback',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.question')),
                ('variable_name', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_-]*$', 'Only alphanumeric characters, underscores and hyphens are allowed.')])),
                ('need_to_confirm', models.BooleanField(default=False)),
                ('display_upload_table', models.BooleanField(default=False)),
                ('display_upload_stats', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.question',),
        ),
        migrations.CreateModel(
            name='FileUploadQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.question')),
                ('upload_mode', models.CharField(choices=[('singlefile', 'Single File'), ('zipfile', '.zip File')], default='singlefile', max_length=20)),
                ('max_filesize', models.IntegerField(default=100000, verbose_name='filesize in kb')),
                ('requires_consent', models.BooleanField(default=False)),
                ('variable_name', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_-]*$', 'Only alphanumeric characters, underscores and hyphens are allowed.')])),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.question',),
        ),
        migrations.CreateModel(
            name='ListQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.question')),
                ('encrypt', models.BooleanField(default=False, help_text='If on, the input is stored in the database in an encrypted form, and not as plain input. If the variable is referenced in a text or description within the questionnaire, the tag "|decrypt" must be added (e.g. [[ var_name|decrypt ]]), otherwise the encrypted value will be displayed.')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.question',),
        ),
        migrations.CreateModel(
            name='MatrixQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.question')),
                ('scale_repetition', models.PositiveIntegerField(blank=True, default=0, help_text='Repeat scale every x lines.', null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.question',),
        ),
        migrations.CreateModel(
            name='MultiChoiceQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.question')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.question',),
        ),
        migrations.CreateModel(
            name='OpenQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.question')),
                ('variable_name', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_-]*$', 'Only alphanumeric characters, underscores and hyphens are allowed.')])),
                ('encrypt', models.BooleanField(default=False)),
                ('display_size', models.CharField(choices=[('small', 'small'), ('large', 'large')], default='small', max_length=10)),
                ('input_format', models.CharField(choices=[('[^0-9\\.]+', 'date'), ('[^0-9]+', 'number'), ('text', 'text')], default='text', max_length=220)),
                ('max_input_length', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.question',),
        ),
        migrations.CreateModel(
            name='QuestionPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.page')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.page',),
        ),
        migrations.CreateModel(
            name='SingleChoiceQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.question')),
                ('variable_name', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_-]*$', 'Only alphanumeric characters, underscores and hyphens are allowed.')])),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.question',),
        ),
        migrations.CreateModel(
            name='TokenGenerator',
            fields=[
                ('trigger_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.trigger')),
                ('store_in_response', models.BooleanField(default=True)),
                ('variable_name', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_-]*$', 'Only alphanumeric characters, underscores and hyphens are allowed.')])),
                ('included_vars', models.TextField(blank=True, max_length=500, null=True)),
                ('include_session_id', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.trigger',),
        ),
        migrations.CreateModel(
            name='TransitionQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.question')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.question',),
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=24)),
                ('related_type', models.CharField(max_length=10, null=True)),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ddm.questionnaire')),
            ],
        ),
        migrations.CreateModel(
            name='UploadedDataTemp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload_id', models.CharField(max_length=10)),
                ('time', models.DateTimeField()),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ddm.questionnaire')),
            ],
        ),
        migrations.CreateModel(
            name='UploadedData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload_id', models.CharField(max_length=10)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('upload_time', models.DateTimeField()),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ddm.questionnaire')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionnaireSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.IntegerField(unique=True)),
                ('current_page', models.IntegerField(blank=True, null=True)),
                ('last_submitted_page', models.IntegerField(blank=True, null=True)),
                ('step_back', models.BooleanField(default=False)),
                ('time_started', models.DateTimeField()),
                ('time_submitted', models.DateTimeField(blank=True, null=True)),
                ('completion_time', models.IntegerField(default=-99)),
                ('completed', models.BooleanField(default=False)),
                ('user_agent', models.CharField(blank=True, max_length=200, null=True)),
                ('access_token', models.CharField(blank=True, max_length=30, null=True)),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ddm.questionnaire')),
            ],
            options={
                'ordering': ['-time_started'],
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=1024)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ddm.questionnairesubmission')),
                ('trigger', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ddm.trigger')),
                ('variable', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='ddm.variable')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionnaireAccessToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=30)),
                ('active', models.BooleanField(default=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ddm.questionnaire')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(blank=True, max_length=255, null=True)),
                ('answer_alt', models.CharField(blank=True, max_length=255, null=True, verbose_name='Additional Answer')),
                ('variable_name', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_-]*$', 'Only alphanumeric characters, underscores and hyphens are allowed.')])),
                ('index', models.IntegerField()),
                ('value', models.IntegerField()),
                ('randomize', models.BooleanField(default=False)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ddm.question')),
                ('variable', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='ddm.variable')),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='variable',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='ddm.variable'),
        ),
        migrations.AddField(
            model_name='page',
            name='questionnaire',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ddm.questionnaire'),
        ),
        migrations.CreateModel(
            name='FilterSequence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_\\)\\(,\\s-]*$', 'Only alphanumeric characters, underscores, hyphens and brackets are allowed.')])),
                ('logic', models.CharField(choices=[('show', 'show if'), ('hide', 'hide if')], default='hide', max_length=20)),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ddm.question')),
                ('question_item', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ddm.questionitem')),
            ],
        ),
        migrations.CreateModel(
            name='FilterCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_-]*$', 'Only alphanumeric characters, underscores and hyphens are allowed.')], verbose_name='filter condition name')),
                ('filter_variable_name', models.CharField(max_length=20)),
                ('comparison_object', models.CharField(choices=[('question', 'question'), ('item', 'item'), ('uploaditem', 'upload item'), ('extvar', 'external variable')], max_length=10)),
                ('comparison_type', models.CharField(choices=[('equal', '='), ('notequal', '!='), ('bigger', '>'), ('smaller', '<')], max_length=20)),
                ('comparison_value', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('filter_ext_var', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_filter', to='ddm.externalvariable')),
                ('filter_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_filter', to='ddm.question')),
                ('filter_question_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_filter', to='ddm.questionitem')),
                ('filter_upload_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_filter', to='ddm.fileuploaditem')),
                ('target_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='filter_condition', to='ddm.question')),
                ('target_question_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='filter_condition', to='ddm.questionitem')),
            ],
        ),
        migrations.AddField(
            model_name='fileuploaditem',
            name='variable',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='ddm.variable'),
        ),
        migrations.AddField(
            model_name='externalvariable',
            name='questionnaire',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ddm.questionnaire'),
        ),
        migrations.AddField(
            model_name='externalvariable',
            name='variable',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='ddm.variable'),
        ),
        migrations.CreateModel(
            name='VariablesFromData',
            fields=[
                ('trigger_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ddm.trigger')),
                ('variable_name_stem', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_-]*$', 'Only alphanumeric characters, underscores and hyphens are allowed.')])),
                ('variable_name_stem_prev', models.CharField(blank=True, max_length=20, null=True)),
                ('n_variables', models.IntegerField()),
                ('n_variables_prev', models.IntegerField(blank=True, null=True)),
                ('field_to_extract', models.CharField(max_length=255)),
                ('filter_active', models.BooleanField(default=False)),
                ('filter_condition', models.CharField(max_length=255)),
                ('related_upload_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ddm.fileuploaditem')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('ddm.trigger',),
        ),
        migrations.AddConstraint(
            model_name='variable',
            constraint=models.UniqueConstraint(fields=('name', 'questionnaire'), name='unique_varname_per_questionnaire'),
        ),
        migrations.AddField(
            model_name='tokengenerator',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ddm.questionnaire'),
        ),
        migrations.AddField(
            model_name='tokengenerator',
            name='variable',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='ddm.variable'),
        ),
        migrations.AddField(
            model_name='questionscale',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ddm.matrixquestion'),
        ),
        migrations.AddConstraint(
            model_name='page',
            constraint=models.UniqueConstraint(fields=('name', 'questionnaire'), name='unique_name_per_questionnaire'),
        ),
        migrations.AddField(
            model_name='fileuploaditem',
            name='file_upload_question',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='ddm.fileuploadquestion'),
        ),
        migrations.AddField(
            model_name='filefeedback',
            name='related_filequestion',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ddm.fileuploaditem'),
        ),
    ]
